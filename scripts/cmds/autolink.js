const fetch = require('node-fetch'); const urlRegex = require('url-regex-safe'); module.exports = { name: 'autolink', aliases: ['alink'], description: 'Automatically detects and processes supported links in chat.', author: 'Priyanshi Kaur', run: async ({ sock, m }) => { const text = m.text; const urls = text.match(urlRegex({ strict: false })); if (urls) { for (const url of urls) { let apiUrl = null; let contentType = 'document'; let contentFilename = 'download'; if (url.includes('spotify.com')) { apiUrl = `https://dev-priyanshi.onrender.com/api/spotify?url=${encodeURIComponent(url)}`; } else if (url.includes('youtube.com') || url.includes('youtu.be')) { apiUrl = `https://dev-priyanshi.onrender.com/api/yt?url=${encodeURIComponent(url)}`; } else if (url.includes('instagram.com/reel')) { apiUrl = `https://dev-priyanshi.onrender.com/api/igreels?url=${encodeURIComponent(url)}`; } else if (url.includes('instagram.com')) { apiUrl = `https://dev-priyanshi.onrender.com/api/ig?url=${encodeURIComponent(url)}`; } else if (url.includes('facebook.com') || url.includes('fb.watch')) { apiUrl = `https://dev-priyanshi.onrender.com/api/fb?url=${encodeURIComponent(url)}`; } else if (url.includes('tiktok.com')) { apiUrl = `https://dev-priyanshi.onrender.com/api/tiktok?url=${encodeURIComponent(url)}`; } if (apiUrl) { try { const response = await fetch(apiUrl); const json = await response.json(); if (json.status && json.data && json.data.medias && json.data.medias.length > 0) { const mediaUrl = json.data.medias[0].url; const mediaBuffer = await fetch(mediaUrl).then(res => res.buffer()); const mediaMime = json.data.medias[0].extension === 'mp3' ? 'audio/mpeg' : json.data.medias[0].extension === 'mp4' ? 'video/mp4' : 'application/octet-stream'; contentType = mediaMime.startsWith('audio/') ? 'audio' : mediaMime.startsWith('video/') ? 'video' : 'document'; contentFilename = json.data.title ? json.data.title.replace(/[^a-z0-9]/gi, '_') : contentFilename; const messageOptions = { mimetype: mediaMime, filename: `${contentFilename}.${json.data.medias[0].extension}`, }; if (contentType === 'audio') { await sock.sendMessage(m.chat, { audio: mediaBuffer, ...messageOptions }, { quoted: m }); } else if (contentType === 'video') { await sock.sendMessage(m.chat, { video: mediaBuffer, ...messageOptions }, { quoted: m }); } else { await sock.sendMessage(m.chat, { document: mediaBuffer, ...messageOptions, caption: url }, { quoted: m }); } } else { sock.sendMessage(m.chat, { text: `Failed to process link: ${url}\nAPI Response: ${json.message || 'Unknown error'}` }, { quoted: m }); } } catch (error) { console.error('AutoLink Error:', error); sock.sendMessage(m.chat, { text: `Error processing link: ${url}\n${error.message}` }, { quoted: m }); } } } } } };